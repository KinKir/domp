server {
	listen 80;
  	server_name lua.dev;
  	index index.html index.htm index.php;
  	#root /data/source/linux-scripts/lua/openresty-src/;
  	access_log  /data/wwwlogs/lua.access;
  	error_log /data/wwwlogs/lua.err;
	location /print_param {
		content_by_lua_block {
			ngx.say("1");
			ngx.eof();
			ngx.exit();
			local arg = ngx.req.get_uri_args()
			ngx.say("2");
			for k,v in pairs(arg) do
				ngx.say("[GET ] key:", k, " v:", v)
			end
			ngx.say("3");
			ngx.req.read_body() -- 解析 body 参数之前一定要先读取 body
			ngx.say("4");
			local arg = ngx.req.get_post_args()
			ngx.say("5");
			for k,v in pairs(arg) do
				ngx.say("[POST] key:", k, " v:", v)
			end
		}
	}

	location /test {
		content_by_lua_block {
			ngx.say("t1")
			local args = ngx.req.get_uri_args()
			ngx.req.read_body() -- 解析 body 参数之前一定要先读取 body
			local post_body = ngx.req.get_post_args()
			local res = ngx.location.capture('/print_param',{
				method = ngx.HTTP_POST,
				#args = ngx.encode_args({a=1, b='2&'}),
				#body = ngx.encode_args({c=3, d='4&'})
				args=args,
				body=post_body,
				}
			)
			ngx.say(res.body)
		}
	}

	location /pullresp {
		default_type 'application/json';
		lua_code_cache off;
		content_by_lua_file '/usr/local/openresty/site/lualib/pullresponse.lua';
	}

	location /genticket {
        default_type 'text/plain';
		lua_code_cache off;
        content_by_lua_file '/usr/local/openresty/site/lualib/genticket.lua';
	}
	location /access {
		lua_code_cache off;
		access_by_lua_file '/usr/local/openresty/site/lualib/access_by_lua_apifilter.lua';
	}
}
